# Choose your state for analysis - assign it to a variable called my_state
my_state <- "California"
# Write your get_acs() code here
county_vars <- c( med_hh_income = "B19013_001", total_pop     = "B01003_001")
county_raw <- get_acs(geography = "county", state =  my_state, survey = "acs5", year = 2022, variables = county_vars, output = "wide")
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
county <- county_raw %>%
mutate(
county_name = str_remove(NAME, paste0(", ", my_state)),
county_name = str_remove(county_name, " County$")
) %>%
select(GEOID, county_name, med_hh_incomeE, med_hh_incomeM, total_popE, total_popM)
# Display the first few rows
head(county)
# Calculate MOE percentage and reliability categories using mutate()
county_reliability <- county %>%
mutate(
moe_percentage = round((med_hh_incomeM/med_hh_incomeE) * 100, 2),
Reliability = case_when(
moe_percentage < 5 ~ "High Confidence",
moe_percentage >= 5 & moe_percentage <= 10 ~ "Moderate Confidence",
moe_percentage > 10 ~ "Low Confidence"
)
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
reliability_summary <- county_reliability %>%
count(Reliability, name = "Count") %>%
mutate(Proportion = round(100 * Count / sum(Count), 1))
kable(reliability_summary, caption = "County Income Reliability Categories")
# Create table of top 5 counties by MOE percentage
top5 <- county_reliability %>%
arrange(desc(moe_percentage)) %>%
slice(1:5) %>%
select(
county_name,
med_hh_incomeE,
med_hh_incomeM,
moe_percentage,
reliability
)
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
recommendations <- county_reliability %>%
select(
County = county_name,
`Median Income` = med_hh_incomeE,
`MOE %` = moe_percentage,
`Reliability Category` = reliability
) %>%
mutate(
Recommendation = case_when(
`Reliability Category` == "High Confidence"     ~ "Safe for algorithmic decisions",
`Reliability Category` == "Moderate Confidence" ~ "Use with caution â€“ monitor outcomes",
`Reliability Category` == "Low Confidence"      ~ "Requires manual review or additional data",
TRUE                                            ~ NA_character_
)
)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
# Set your Census API key
census_api_key("807ea1c0820a3e1e46dde3c53438622057fcc1ba")
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "California"
# Write your get_acs() code here
county_vars <- c( med_hh_income = "B19013_001", total_pop     = "B01003_001")
county_raw <- get_acs(geography = "county", state =  my_state, survey = "acs5", year = 2022, variables = county_vars, output = "wide")
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
county <- county_raw %>%
mutate(
county_name = str_remove(NAME, paste0(", ", my_state)),
county_name = str_remove(county_name, " County$")
) %>%
select(GEOID, county_name, med_hh_incomeE, med_hh_incomeM, total_popE, total_popM)
# Display the first few rows
head(county)
# Calculate MOE percentage and reliability categories using mutate()
county_reliability <- county %>%
mutate(
moe_percentage = round((med_hh_incomeM/med_hh_incomeE) * 100, 2),
Reliability = case_when(
moe_percentage < 5 ~ "High Confidence",
moe_percentage >= 5 & moe_percentage <= 10 ~ "Moderate Confidence",
moe_percentage > 10 ~ "Low Confidence"
)
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
reliability_summary <- county_reliability %>%
count(Reliability, name = "Count") %>%
mutate(Proportion = round(100 * Count / sum(Count), 1))
kable(reliability_summary, caption = "County Income Reliability Categories")
# Create table of top 5 counties by MOE percentage
top5 <- county_reliability %>%
arrange(desc(moe_percentage)) %>%
slice(1:5) %>%
select(
county_name,
med_hh_incomeE,
med_hh_incomeM,
moe_percentage,
reliability
)
# Create table of top 5 counties by MOE percentage
top5 <- county_reliability %>%
arrange(desc(moe_percentage)) %>%
slice(1:5) %>%
select(
county_name,
med_hh_incomeE,
med_hh_incomeM,
moe_percentage,
Reliability
)
# Format as table with kable() - include appropriate column names and caption
kable(
top5,
caption = "Top 5 Counties by Median Household Income MOE Percentage",
col.names = c("County", "Median Income", "Margin of Error", "MOE %", "Reliability Category"),
digits = 2,
align = c("l", "c", "c", "c", "c"),
format.args = list(big.mark = ",")
)
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
selected_counties <- bind_rows(
county_reliability %>%
filter(reliability == "High Confidence") %>%
slice(1),
county_reliability %>%
filter(reliability == "Moderate Confidence") %>%
slice(1),
county_reliability %>%
filter(reliability == "Low Confidence") %>%
slice(1),
) %>%
select(
County = county_name,
`Median Income` = med_hh_incomeE,
`Margin of Error` = med_hh_incomeM,
`MOE %` = moe_percentage,
Reliability = reliability,
Population = total_popE
)
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
selected_counties <- bind_rows(
county_reliability %>%
filter(Reliability == "High Confidence") %>%
slice(1),
county_reliability %>%
filter(Reliability == "Moderate Confidence") %>%
slice(1),
county_reliability %>%
filter(Reliability == "Low Confidence") %>%
slice(1),
) %>%
select(
County = county_name,
`Median Income` = med_hh_incomeE,
`Margin of Error` = med_hh_incomeM,
`MOE %` = moe_percentage,
Reliability = Reliability,
Population = total_popE
)
# Display the selected counties with their key characteristics
# Show: county name, median income, MOE percentage, reliability category
kable(
selected_counties,
caption = "Largest County by Population in Each Reliability Category",
align = c("l", "r", "r", "r", "l", "r"),
format.args = list(big.mark = ",")
)
# Define your race/ethnicity variables with descriptive names
race_vars <- c(
total    = "B03002_001",
white    = "B03002_003",
black    = "B03002_004",
hispanic = "B03002_012"
)
# Use get_acs() to retrieve tract-level data
# Hint: You may need to specify county codes in the county parameter
county_codes <- unique(str_sub(county$GEOID, 3, 5))
tract_raw <- get_acs(
geography = "tract",
state     = my_state,
county    = county_codes,
survey    = "acs5",
year      = 2022,
variables = race_vars,
output    = "wide"
)
# Calculate percentage of each group using mutate()
# Create percentages for white, Black, and Hispanic populations
tract_percent <- tract_raw %>%
mutate(
county_code  = substr(GEOID, 3, 5),
pct_white    = 100 * (whiteE    / totalE),
pct_black    = 100 * (blackE    / totalE),
pct_hispanic = 100 * (hispanicE / totalE),
tract_label  = str_remove(NAME, paste0(", ", my_state)),
tract_label  = str_remove(tract_label, ", United States$")
) %>%
left_join(
county %>%
mutate(county_code = substr(GEOID, 3, 5)) %>% #I doubled checked the counts with the census website.
select(county_code, county_name),
by = "county_code"
) %>%
select(
GEOID, county_name, tract_label,
totalE, whiteE, blackE, hispanicE,
totalM, whiteM, blackM, hispanicM,
pct_white, pct_black, pct_hispanic
)
# Add readable tract and county name columns using str_extract() or similar
kable(
tract_percent %>% count(county_name, name = "Number of Tracts"),
caption = "Tracts Retrieved per Selected County",
align = c("l", "c"),
col.names = c("County Names", "Number of Tracts")
)
# Find the tract with the highest percentage of Hispanic/Latino residents
# Hint: use arrange() and slice() to get the top tract
top_hispanic_tract <- tract_percent %>%
arrange(desc(pct_hispanic)) %>%
slice(1) %>%
select(GEOID, tract_label, county_name, pct_hispanic)
kable(top_hispanic_tract, caption = "Tract with Highest % Hispanic/Latino")
# Calculate average demographics by county using group_by() and summarize()
# Show: number of tracts, average percentage for each racial/ethnic group
county_demo_avgs <- tract_percent %>%
group_by(county_name) %>%
summarise(
"Number of Tracts" = n(),
"Average White Percentage" = mean(pct_white, na.rm = TRUE),
"Average Black Percentage" = mean(pct_black, na.rm = TRUE),
"Average Hispanic Percentage"  = mean(pct_hispanic, na.rm = TRUE)
)
# Create a nicely formatted table of your results using kable()
kable(
county_demo_avgs,
caption = "Average Tract Demographics by County",
digits = 1,
align = c("l","c","c","c","c")
)
# Find the tract with the highest percentage of Hispanic/Latino residents
# Hint: use arrange() and slice() to get the top tract
top_hispanic_tract <- tract_percent %>%
arrange(desc(pct_hispanic)) %>%
slice(1) %>%
select(GEOID, tract_label, county_name, pct_hispanic)
kable(top_hispanic_tract, caption = "Tract with Highest % Hispanic/Latino")
# Calculate average demographics by county using group_by() and summarize()
# Show: number of tracts, average percentage for each racial/ethnic group
county_demo_avgs <- tract_percent %>%
group_by(county_name) %>%
summarise(
"Number of Tracts" = n(),
"Average White Percentage" = mean(pct_white, na.rm = TRUE),
"Average Black Percentage" = mean(pct_black, na.rm = TRUE),
"Average Hispanic Percentage"  = mean(pct_hispanic, na.rm = TRUE)
)
# Create a nicely formatted table of your results using kable()
kable(
county_demo_avgs,
caption = "Average Tract Demographics by County",
digits = 1,
align = c("l","c","c","c","c")
col.names = c("County Names", "Number of Tracts", "Average White Percentage",,)
# Find the tract with the highest percentage of Hispanic/Latino residents
# Hint: use arrange() and slice() to get the top tract
top_hispanic_tract <- tract_percent %>%
arrange(desc(pct_hispanic)) %>%
slice(1) %>%
select(GEOID, tract_label, county_name, pct_hispanic)
kable(top_hispanic_tract, caption = "Tract with Highest % Hispanic/Latino")
# Calculate average demographics by county using group_by() and summarize()
# Show: number of tracts, average percentage for each racial/ethnic group
county_demo_avgs <- tract_percent %>%
group_by(county_name) %>%
summarise(
"Number of Tracts" = n(),
"Average White Percentage" = mean(pct_white, na.rm = TRUE),
"Average Black Percentage" = mean(pct_black, na.rm = TRUE),
"Average Hispanic Percentage"  = mean(pct_hispanic, na.rm = TRUE)
)
# Create a nicely formatted table of your results using kable()
kable(
county_demo_avgs,
caption = "Average Tract Demographics by County",
digits = 1,
align = c("l","c","c","c","c")
col.names = c("County Names", "Number of Tracts", "Average White Percentage","Average Black Percentage","Average Hispanic Percentage")
# Find the tract with the highest percentage of Hispanic/Latino residents
# Hint: use arrange() and slice() to get the top tract
top_hispanic_tract <- tract_percent %>%
arrange(desc(pct_hispanic)) %>%
slice(1) %>%
select(GEOID, tract_label, county_name, pct_hispanic)
kable(top_hispanic_tract, caption = "Tract with Highest % Hispanic/Latino")
# Calculate average demographics by county using group_by() and summarize()
# Show: number of tracts, average percentage for each racial/ethnic group
county_demo_avgs <- tract_percent %>%
group_by(county_name) %>%
summarise(
"Number of Tracts" = n(),
"Average White Percentage" = mean(pct_white, na.rm = TRUE),
"Average Black Percentage" = mean(pct_black, na.rm = TRUE),
"Average Hispanic Percentage"  = mean(pct_hispanic, na.rm = TRUE)
)
# Create a nicely formatted table of your results using kable()
kable(
county_demo_avgs,
caption = "Average Tract Demographics by County",
digits = 1,
align = c("l","c","c","c","c"),
col.names = c("County Names", "Number of Tracts", "Average White Percentage","Average Black Percentage","Average Hispanic Percentage")
)
# Find the tract with the highest percentage of Hispanic/Latino residents
# Hint: use arrange() and slice() to get the top tract
top_hispanic_tract <- tract_percent %>%
arrange(desc(pct_hispanic)) %>%
slice(1) %>%
select(GEOID, tract_label, county_name, pct_hispanic)
kable(top_hispanic_tract, caption = "Tract with Highest % Hispanic/Latino")
# Calculate average demographics by county using group_by() and summarize()
# Show: number of tracts, average percentage for each racial/ethnic group
county_demo_avgs <- tract_percent %>%
group_by(county_name) %>%
summarise(
"Number of Tracts" = n(),
"Average White Percentage" = mean(pct_white, na.rm = TRUE),
"Average Black Percentage" = mean(pct_black, na.rm = TRUE),
"Average Hispanic Percentage"  = mean(pct_hispanic, na.rm = TRUE)
)
# Create a nicely formatted table of your results using kable()
kable(
county_demo_avgs,
caption = "Average Tract Demographics by County",
digits = 1,
align = c("l","c","c","c","c"),
col.names = c("County Names", "Number of Tracts",,,)
)
# Find the tract with the highest percentage of Hispanic/Latino residents
# Hint: use arrange() and slice() to get the top tract
top_hispanic_tract <- tract_percent %>%
arrange(desc(pct_hispanic)) %>%
slice(1) %>%
select(GEOID, tract_label, county_name, pct_hispanic)
kable(top_hispanic_tract, caption = "Tract with Highest % Hispanic/Latino")
# Calculate average demographics by county using group_by() and summarize()
# Show: number of tracts, average percentage for each racial/ethnic group
county_demo_avgs <- tract_percent %>%
group_by(county_name) %>%
summarise(
"Number of Tracts" = n(),
"Average White Percentage" = mean(pct_white, na.rm = TRUE),
"Average Black Percentage" = mean(pct_black, na.rm = TRUE),
"Average Hispanic Percentage"  = mean(pct_hispanic, na.rm = TRUE)
)
# Create a nicely formatted table of your results using kable()
kable(
county_demo_avgs,
caption = "Average Tract Demographics by County",
digits = 1,
align = c("l","c","c","c","c"),
col.names = c("County Names", "Number of Tracts", "Average White Percentage","Average Black Percentage","Average Hispanic Percentage")
)
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
tract_quality <- tract_percent %>%
mutate(
moe_total_pct    = 100 * (totalM    / totalE),
moe_white_pct    = 100 * (whiteM    / whiteE),
moe_black_pct    = 100 * (blackM    / blackE),
moe_hispanic_pct = 100 * (hispanicM / hispanicE),
high_moe_flag = (moe_white_pct > 15) | (moe_black_pct > 15) | (moe_hispanic_pct > 15)
)
# Create summary statistics showing how many tracts have data quality issues
tract_quality_summary <- tract_quality %>%
summarise(
tracts_total = n(),
tracts_high_moe = sum(high_moe_flag, na.rm = TRUE),
percent_high_moe = round(100 * tracts_high_moe / tracts_total, 1)
)
kable(
tract_quality_summary,
caption = "Tract-Level High-MOE Summary (>15% on any demographic variable)",
col.names = c("Total Tracts", "High-MOE Tracts", "Percent High-MOE (%)"),
align = "c"
)
# Group tracts by whether they have high MOE issues
# Calculate average characteristics for each group:
# - population size, demographic percentages
pattern_table <- tract_quality %>%
group_by(high_moe_flag, county_name) %>%
summarise(
tracts = n(),
avg_pop = mean(totalE, na.rm = TRUE),
avg_pct_white = mean(pct_white, na.rm = TRUE),
avg_pct_black = mean(pct_black, na.rm = TRUE),
avg_pct_hispanic = mean(pct_hispanic, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(desc(high_moe_flag), county_name)
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
kable(
pattern_table,
caption = "Characteristics by High-MOE Status (Any Demographic Variable > 15% MOE)",
digits = 1,
format.args = list(big.mark = ",")
)
# Group tracts by whether they have high MOE issues
# Calculate average characteristics for each group:
# - population size, demographic percentages
pattern_table <- tract_quality %>%
group_by(high_moe_flag, county_name) %>%
summarise(
tracts = n(),
avg_pop = mean(totalE, na.rm = TRUE),
avg_pct_white = mean(pct_white, na.rm = TRUE),
avg_pct_black = mean(pct_black, na.rm = TRUE),
avg_pct_hispanic = mean(pct_hispanic, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(desc(high_moe_flag), county_name)
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
kable(
pattern_table,
caption = "Characteristics by High-MOE Status (Any Demographic Variable > 15% MOE)",
digits = 1,
format.args = list(big.mark = ",")
col.names = c("High MOE Flag", "County name", "Total Tracts", "Average Population", "Percentage White", "Percentage Black", "Percentage Hispanic")
# Group tracts by whether they have high MOE issues
# Calculate average characteristics for each group:
# - population size, demographic percentages
pattern_table <- tract_quality %>%
group_by(high_moe_flag, county_name) %>%
summarise(
tracts = n(),
avg_pop = mean(totalE, na.rm = TRUE),
avg_pct_white = mean(pct_white, na.rm = TRUE),
avg_pct_black = mean(pct_black, na.rm = TRUE),
avg_pct_hispanic = mean(pct_hispanic, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(desc(high_moe_flag), county_name)
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
kable(
pattern_table,
caption = "Characteristics by High-MOE Status (Any Demographic Variable > 15% MOE)",
digits = 1,
format.args = list(big.mark = ","),
col.names = c("High MOE Flag", "County name", "Total Tracts", "Average Population", "Percentage White", "Percentage Black", "Percentage Hispanic")
)
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
recommendations <- county_reliability %>%
select(
County = county_name,
`Median Income` = med_hh_incomeE,
`MOE %` = moe_percentage,
`Reliability Category` = reliability
) %>%
mutate(
Recommendation = case_when(
`Reliability Category` == "High Confidence"     ~ "Safe for algorithmic decisions",
`Reliability Category` == "Moderate Confidence" ~ "Use with caution â€“ monitor outcomes",
`Reliability Category` == "Low Confidence"      ~ "Requires manual review or additional data",
TRUE                                            ~ NA_character_
)
)
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
recommendations <- county_reliability %>%
select(
County = county_name,
`Median Income` = med_hh_incomeE,
`MOE %` = moe_percentage,
`Reliability Category` = Reliability
) %>%
mutate(
Recommendation = case_when(
`Reliability Category` == "High Confidence"     ~ "Safe for algorithmic decisions",
`Reliability Category` == "Moderate Confidence" ~ "Use with caution â€“ monitor outcomes",
`Reliability Category` == "Low Confidence"      ~ "Requires manual review or additional data",
TRUE                                            ~ NA_character_
)
)
# Add a new column with algorithm recommendations using case_when():
# - High Confidence: "Safe for algorithmic decisions"
# - Moderate Confidence: "Use with caution - monitor outcomes"
# - Low Confidence: "Requires manual review or additional data"
# Format as a professional table with kable()
kable(
recommendations %>%
arrange(Recommendation, County),
caption = "Decision Framework for Algorithm Implementation (Arranged by Recommendation)",
col.names = c("County", "Median Income", "MOE %", "Reliability Category", "Recommendation"),
digits = 2,
format.args = list(big.mark = ",")
)
