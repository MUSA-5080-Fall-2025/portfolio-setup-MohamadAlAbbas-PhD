# Load the tidyverse library
library(tidyverse)
# Read in the car sales data
# Make sure the data file is in your lab_0/data/ folder
car_data <- read_csv("data/car_sales_data.csv")
# Use glimpse() to see the data structure
# Check the column names
glimpse(car_data)
# Look at the first few rows
head(car_data)
# Use glimpse() to see the data structure
# Check the column names
glimpse(car_data,10)
# Look at the first few rows
head(car_data)
# Use glimpse() to see the data structure
# Check the column names
glimpse(car_data,10)
# Look at the first few rows
head(car_data,10)
# Use glimpse() to see the data structure
# Check the column names
glimpse(car_data)
# Look at the first few rows
head(car_data)
# Look at the tibble version (what we have)
car_data
# Convert to regular data frame and display
car_df <- as.data.frame(car_data)
car_df
# Look at the tibble version (what we have)
car_data
# Convert to regular data frame and display
car_df <- as.data.frame(car_data)
car_df
# Select just Model and Mileage columns
select(car_data, Model, Milage)
# Select just Model and Mileage columns
select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
# Challenge: Select all columns EXCEPT Engine Size
# Select just Model and Mileage columns
select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
select(car_data,'Year of manufacturer', Price, 'Fuel Type')
# Select just Model and Mileage columns
select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
select(car_data,"Year of manufacturer", Price, "Fuel Type")
# Select just Model and Mileage columns
Model_Mileage <- select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
Manu_price_Fuel <- select(car_data,`Year of manufacturer`, Price, `Fuel type`)
# Select just Model and Mileage columns
Model_Mileage <- select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
Manu_price_Fuel <- select(car_data,`Year of manufacture`, Price, `Fuel type`)
# Challenge: Select all columns EXCEPT Engine Size
no_engine <- select(car_data, -`Engine size`)
# Rename 'Year of manufacture' to year
rename(car_data, year = `Year of manufacture`)
# Check that it worked
names(car_data)
# Rename 'Year of manufacture' to year
car_data <- rename(car_data, year = `Year of manufacture`)
# Check that it worked
names(car_data)
# Create an 'age' column (2025 minus year of manufacture)
car_data <- car_data %>%
mutate(
age = 2025 - year,   # compute age
)
# Create a mileage_per_year column
car_data <- car_data %>%
mutate(
mileage_per_year = Mileage / age       # compute mileage per year
)
# Look at your new columns
select(car_data, Model, year, age, Mileage, mileage_per_year)
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>%
mutate(
price_category = case_when(
Price < 15000 ~ "budget",
Price >= 15000 & Price <= 30000 ~ "midrange",
Price > 30000 ~ "high-range"
)
)
# Check your categories select the new column and show it
select(Model, Price, price_category)
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>%
mutate(
price_category = case_when(
Price < 15000 ~ "budget",
Price >= 15000 & Price <= 30000 ~ "midrange",
Price > 30000 ~ "high-range"
)
)
# Check your categories select the new column and show it
select(car_data, Price, price_category)
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>%
mutate(
price_category = case_when(
Price < 15000 ~ "budget",
Price >= 15000 & Price <= 30000 ~ "midrange",
Price > 30000 ~ "luxury"
)
)
# Check your categories select the new column and show it
select(car_data, Price, price_category)
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>%
mutate(
price_category = case_when(
Price < 15000 ~ "budget",
Price >= 15000 & Price <= 30000 ~ "midrange",
Price > 30000 ~ "luxury"
)
)
# Check your categories select the new column and show it
select(car_data, Model, Price, price_category)
# Find all Toyota cars
toyota_cars <- car_data %>%
filter(Model == "Toyota")
# Find cars with mileage less than 30,000
low_mileage <- car_data %>%
filter(Mileage < 30000)
# Find luxury cars (from price category) with low mileage
luxury_cars <- car_data %>%
filter(price_category == "luxury")
# Find all Toyota cars
toyota_cars <- car_data %>%
filter(Model == "Toyota")
# Find cars with mileage less than 30,000
low_mileage <- car_data %>%
filter(Mileage < 30000)
# Find luxury cars (from price category) with low mileage
luxury_cars <- car_data %>%
filter(price_category == "luxury")
toyota_cars
low_mileage
luxury_cars
# Find all Toyota cars
toyota_cars <- car_data %>%
filter(Model == "toyota")
# Find cars with mileage less than 30,000
low_mileage <- car_data %>%
filter(Mileage < 30000)
# Find luxury cars (from price category) with low mileage
luxury_cars <- car_data %>%
filter(price_category == "luxury")
toyota_cars
low_mileage
luxury_cars
View(car_data)
# Find all Toyota cars
toyota_cars <- car_data %>%
filter(Manufacturer == "Toyota")
# Find cars with mileage less than 30,000
low_mileage <- car_data %>%
filter(Mileage < 30000)
# Find luxury cars (from price category) with low mileage
luxury_cars <- car_data %>%
filter(price_category == "luxury")
toyota_cars
low_mileage
luxury_cars
# Find cars that are EITHER Honda OR Nissan
honda_nissan <- car_data %>%
filter(Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000
price_range <- car_data %>%
filter(Price >= 20000, Price <= 35000)
# Find diesel cars less than 10 years old
diesel_recent <- car_data %>%
mutate(age = 2025 - year ) %>%
filter(`Fuel Type` == "Diesel", age < 10)
# Find cars that are EITHER Honda OR Nissan
honda_nissan <- car_data %>%
filter(Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000
price_range <- car_data %>%
filter(Price >= 20000, Price <= 35000)
# Find diesel cars less than 10 years old
diesel_recent <- car_data %>%
mutate(age = 2025 - year ) %>%
filter(`Fuel Type` == "diesel", age < 10)
# Find cars that are EITHER Honda OR Nissan
honda_nissan <- car_data %>%
filter(Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000
price_range <- car_data %>%
filter(Price >= 20000, Price <= 35000)
# Find diesel cars less than 10 years old
diesel_recent <- car_data %>%
mutate(age = 2025 - year ) %>%
filter(`Fuel type` == "diesel", age < 10)
honda_nissan
price_range
diesel_recent
# Find cars that are EITHER Honda OR Nissan
honda_nissan <- car_data %>%
filter(Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000
price_range <- car_data %>%
filter(Price >= 20000, Price <= 35000)
# Find diesel cars less than 10 years old
diesel_recent <- car_data %>%
mutate(age = 2025 - year ) %>%
filter(`Fuel type` == "Diesel", age < 10)
honda_nissan
price_range
diesel_recent
# Find cars that are EITHER Honda OR Nissan
honda_nissan <- car_data %>%
filter(Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000
price_range <- car_data %>%
filter(Price >= 20000, Price <= 35000)
# Find diesel cars less than 10 years old
diesel_recent <- car_data %>%
filter(`Fuel type` == "Diesel", age < 10)
honda_nissan
price_range
diesel_recent
View(car_data)
# Calculate average price by manufacturer
avg_price_by_brand <- car_data %>%
group_by(Manufacturer) %>%
summarize(avg_price = mean(Price, na.rm = TRUE))
avg_price_by_brand
# Calculate average mileage by fuel type
avg_price_by_brand <- car_data %>%
group_by(`Fuel type`) %>%
summarize(avg_mileage = mean(Mileage, na.rm = TRUE))
avg_price_by_brand
# Count cars by manufacturer
# Calculate average price by manufacturer
avg_price_by_brand <- car_data %>%
group_by(Manufacturer) %>%
summarize(avg_price = mean(Price, na.rm = TRUE))
avg_price_by_brand
# Calculate average mileage by fuel type
avg_price_by_brand <- car_data %>%
group_by(`Fuel type`) %>%
summarize(avg_mileage = mean(Mileage, na.rm = TRUE))
avg_price_by_brand
# Count cars by manufacturer
car_counts <- car_data %>%
count(Manufacturer)
car_counts
# Frequency table for price categories
car_data %>%
count(price_category, name = "frequency")
# Frequency table for price categories
freq_cat <- car_data %>%
count(price_category, name = "frequency") %>%
mutate(proportion = frequency / sum(frequency))
freq_cat
# Look at the tibble version (what we have)
car_data
# Convert to regular data frame and display
# car_df <- as.data.frame(car_data)
# car_df
# Look at the tibble version (what we have)
car_data
# Convert to regular data frame and display
# car_df <- as.data.frame(car_data)
# car_df
# Select just Model and Mileage columns
Model_Mileage <- select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
Manu_price_Fuel <- select(car_data,`Year of manufacture`, Price, `Fuel type`)
# Load the tidyverse library
library(tidyverse)
# Read in the car sales data
# Make sure the data file is in your lab_0/data/ folder
car_data <- read_csv("data/car_sales_data.csv")
# Use glimpse() to see the data structure
# Check the column names
glimpse(car_data)
# Look at the first few rows
head(car_data)
# Look at the tibble version (what we have)
car_data
# Convert to regular data frame and display
# car_df <- as.data.frame(car_data)
# car_df
# Select just Model and Mileage columns
Model_Mileage <- select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
Manu_price_Fuel <- select(car_data,`Year of manufacture`, Price, `Fuel type`)
# Challenge: Select all columns EXCEPT Engine Size
no_engine <- select(car_data, -`Engine size`)
# Rename 'Year of manufacture' to year
car_data <- rename(car_data, year = `Year of manufacture`)
# Check that it worked
names(car_data)
# Create an 'age' column (2025 minus year of manufacture)
car_data <- car_data %>%
mutate(
age = 2025 - year,   # compute age
)
# Create a mileage_per_year column
car_data <- car_data %>%
mutate(
mileage_per_year = Mileage / age       # compute mileage per year
)
# Look at your new columns
select(car_data, Model, year, age, Mileage, mileage_per_year)
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>%
mutate(
price_category = case_when(
Price < 15000 ~ "budget",
Price >= 15000 & Price <= 30000 ~ "midrange",
Price > 30000 ~ "luxury"
)
)
# Check your categories select the new column and show it
select(car_data, Model, Price, price_category)
# Find all Toyota cars
toyota_cars <- car_data %>%
filter(Manufacturer == "Toyota")
# Find cars with mileage less than 30,000
low_mileage <- car_data %>%
filter(Mileage < 30000)
# Find luxury cars (from price category) with low mileage
luxury_cars <- car_data %>%
filter(price_category == "luxury")
toyota_cars
low_mileage
luxury_cars
# Find cars that are EITHER Honda OR Nissan
honda_nissan <- car_data %>%
filter(Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000
price_range <- car_data %>%
filter(Price >= 20000, Price <= 35000)
# Find diesel cars less than 10 years old
diesel_recent <- car_data %>%
filter(`Fuel type` == "Diesel", age < 10)
honda_nissan
price_range
diesel_recent
# Calculate average price by manufacturer
avg_price_by_brand <- car_data %>%
group_by(Manufacturer) %>%
summarize(avg_price = mean(Price, na.rm = TRUE))
avg_price_by_brand
# Calculate average mileage by fuel type
avg_price_by_brand <- car_data %>%
group_by(`Fuel type`) %>%
summarize(avg_mileage = mean(Mileage, na.rm = TRUE))
avg_price_by_brand
# Count cars by manufacturer
car_counts <- car_data %>%
count(Manufacturer)
car_counts
# Frequency table for price categories
freq_cat <- car_data %>%
count(price_category, name = "frequency") %>%
mutate(proportion = frequency / sum(frequency))
freq_cat
